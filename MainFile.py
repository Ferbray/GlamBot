import json
import os
import shutil
import random
import re
import ssl
from time import ctime,time
from decimal import Decimal
from operator import itemgetter

from vkbottle import Bot, Message, keyboard_gen,VKError
from vkbottle.branch import ClsBranch, ExitBranch, rule_disposal, Branch
from vkbottle.rule import AbstractMessageRule
from vkbottle.keyboard import Keyboard, Text
from vbml import PatchedValidators
from aiohttp import ClientSession
import requests
import asyncio
import asyncpg

from database_wrapper import Database
from qiwi_wrapper import *

bot = Bot('9c6713c47ccc55cbbb5ba7b712c1a8a5e7c3c419da361d12f60dfd27ad3c882ed28c344b898193733989b', mobile=False)

conn = Database(user='glamuser', password='GisMyVoron1974', database='glamdata', host='127.0.0.1')

async def get_info(upload_url: str, files: dict):
	async with ClientSession(json_serialize=json.dumps) as client:
		async with client.post(upload_url, ssl=ssl.SSLContext(),data=files) as r:
			response = await r.read()
	return json.loads(response)

async def UpPhoto(ans, img_name):
	upload_info = await bot.api.photos.get_messages_upload_server(peer_id=ans.from_id)
	upload_task = bot.loop.create_task(get_info(upload_info.upload_url, files={'photo': open(img_name, "rb")}))
	upload_result = await upload_task
	serv_xy_map = await bot.api.photos.save_messages_photo(photo=upload_result["photo"], server=upload_result["server"], hash=upload_result["hash"])
	xymap = "photo{}_{}".format(serv_xy_map[0].owner_id, serv_xy_map[0].id)
	return xymap

@bot.on.pre_process()
async def registration(ans: Message):
	if len(await conn.fetch(f"SELECT person_id FROM date_person WHERE person_id={ans.from_id}"))==0:
		await bot.branch.add(ans.from_id, 'registration_branch')

@bot.branch.cls_branch("registration_branch")
class Branch(ClsBranch):
	@rule_disposal(VBMLRule(text=["–ú—É–∂—Å–∫–æ–π","–ñ–µ–Ω—Å–∫–∏–π"], lower=True))
	async def join_registration_branch(self, ans: Message):
		os.mkdir(f"PhotoDatePlayers/{ans.from_id}")
		try:
			vk = await bot.api.users.get(user_ids=ans.from_id, fields="photo_400_orig")
			r = requests.get(vk[0].photo_400_orig,stream=True)
			regfile = vk[0].photo_400_orig.split("/")[-1]
			regfile = regfile.split('.')[0]
			with open(f"PhotoDatePlayers/{ans.from_id}/{regfile}.png","bw") as file:
				for chunk in r.iter_content(4096):
					file.write(chunk)
		except:
			shutil.copy('materials_bot/NoPhoto.png', f"PhotoDatePlayers/{ans.from_id}")
			regfile = "NoPhoto"
			await ans("–£ –≤–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏, –≤–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —ç—Ç–∞!", attachment=...)

		ElipsAva(ans.from_id,regfile)
		reg_nick_id = (await bot.api.users.get(user_ids=ans.from_id))[0].first_name
		date_reg = round(time())
		gender_player = (1 if ans.text=='–ñ–µ–Ω—Å–∫–∏–π' else 0)

		# state_list=[ans.from_id,reg_nick_id,"1",race,"0","10",strength,hp,mind,agility,"","","",""]
		# WriteProfil(state_list)
		# inventory_list=[ans.from_id,"0","0","–ë–µ–∑ –æ—Ä—É–∂–Ω—ã–π","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç","–û—Ç—Å—É—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"]
		# WriteInventory(inventory_list)
		# skills_list=[ans.from_id,"1","[0/30]","1","[0/10]","1","[0/10]","1","[0/10]","1","[0/10]"]
		# WriteSkills(skills_list)

		await conn.execute("INSERT INTO player_database VALUES ("
		f"{ans.from_id}, '{reg_nick_id}', {gender_player}, {date_reg}, 0, 0, 0,"
		"0, 0, 0, 76, 32, 19, 89, ..., 61, 6, , 0, 57, 100, 72, 100, 30, 100,"
		"0, 100, 1, 500, 0, 0, 3, 0, 10, 6, 1, 0)")

		await conn.execute("INSERT INTO player_inventory VALUES ("
		f"{ans.from_id}, '{reg_nick_id}',0,array[[1,5]],0,1,1,0,1)")

		await conn.execute("INSERT INTO settings VALUES ("
		f"{ans.from_id}, '{reg_nick_id}',0,0,0)")

		after_registration_button = [
			[{'text':'–î–æ–º–æ–π','color':'positive'}]
		]
		after_registration_keyboard = keyboard_gen(after_registration_button, inline=True)

		await ans(f"üî∏–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\nüî∏–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ - {ans.text[:-2]}–æ–≥–æ —Ä–æ–¥–∞\nüî∏–í–∞–º –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è - –î–æ–º–æ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë", keyboard=after_registration_keyboard, attachment=...)

	async def round_registration_branch(self, ans: Message, *args):
		registration_button = [
			[{'text':'–ú—É–∂—Å–∫–æ–π','color':'positive'}],
			[{'text':'–ñ–µ–Ω—Å–∫–∏–π', 'color':'primary'}]
		]
		registration_keyboard = keyboard_gen(registration_button, inline=True)
		await ans("üî∏–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–ª–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\nüî∏–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!", keyboard=registration_keyboard, attachment=...)


@bot.on.message(text=["–¥–æ–º–æ–π", "!–¥–æ–º–æ–π", "! –¥–æ–º–æ–π", "/–¥–æ–º–æ–π", "/ –¥–æ–º–æ–π"],lower=True)
async def start_place(ans: Message):
	house_button = [
		[{'text':'–ù–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä','color':'positive'}],
		[{'text':'–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'color':'primary'}, {'text':'–ú–∞–≥–∞–∑–∏–Ω','color':'primary'}],
		[{'text':'–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', 'color':'positive'}, {'text':'–ü–æ–º–æ—â—å', 'color':'positive'}]
	]
	house_keyboard = keyboard_gen(house_button, inline=True)
	await ans("üî∏–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç –ø–ª–æ—â–∞–¥–∫—É ‚Äî —ç—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –æ—Ç –º—É–ª—Ç—å—Ç–∏–ø–ª–µ–µ—Ä–∞\nüî∏–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ: –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É, —É–∑–Ω–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ,–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.", keyboard=house_keyboard, attachment=...)

@bot.on.message(text=["—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "!—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "! —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "/—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "/ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"],lower=True)
async def top_player(ans: Message):
	top_button = [
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	]
	top_keyboard = keyboard_gen(top_button,inline=True)
	await ans("üî∏–í–∞–º –ø–æ–∫–∞–∑–∞–Ω —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ GlamBot-–∞\nüî∏–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å–∞–º—ã–µ –≤–µ–ª–∏—á–∞–π—à–∏–µ –±–æ–π—Ü—ã", keyboard=top_keyboard, attachment=...)

@bot.on.message(text=["–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", "!–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", "! –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", "/—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "/ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"],lower=True)
async def find_server(ans: Message):
	sessions_button = []

	sessions_list = [
	["–°–µ—Å—Å–∏—è ‚Äî 1","first_session"],
	["–°–µ—Å—Å–∏—è ‚Äî 2","second_session"],
	["–°–µ—Å—Å–∏—è ‚Äî 3","third_session"],
	["–°–µ—Å—Å–∏—è ‚Äî 4","fourth_session"],
	["–°–µ—Å—Å–∏—è ‚Äî 5","fiveth_session"]
	]

	load_sessions = ""

	for sess in sessions_list:
		session_player = await conn.fetch("SELECT %s,status_player FROM * WHERE id=%s" % (sess[1],ans.from_id))
		light_bulb_load = ("üíö" if session_player<=70 else "üß°")
		light_bulb_load = ("‚ù§Ô∏è" if session_player>=100 else light_bulb_load)
		load_sessions += f"{sess[0]}\nüë•–ò–≥—Ä–æ–∫–æ–≤ ‚Äî [0/{session_player}]{light_bulb_load}\n"
		if session_player[0][f"{sess[1]}"] < 100 or (session_player[0]["status_player"] >= ... and session_player[0][f"{sess[1]}"] < 110):
			sessions_button.append([
				[{'text':sess[0], 'color':'negative'}]
			])


	sessions_button.append([
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	])
	session_keyboard = keyboard_gen(sessions_button, inline=True)
	await ans(f"üî∏–≠—Ç–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏, –±–ª–∞–≥–æ–¥–∞—Ä—è –∏–º –≤—ã —Å –¥—Ä—É–≥–æ–º –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ, —Ç–∞–∫ –∂–µ —Å–µ—Å—Å–∏–∏ –Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –≤ –ª–æ–∫–∞—Ü–∏—è—Ö\nüî∏–ü–æ–∫—É–ø–∞—è —Å—Ç–∞—Ç—É—Å ‚Äî ..., –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–µ—Å—Å–∏—é —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–æ 120 —á–µ–ª–æ–≤–µ–∫\n\nüîπ–°–µ—Å—Å–∏–∏:\n{load_sessions}", keyboard=session_keyboard, attachment=...)

@bot.on.message(text=["—Å–µ—Å—Å–∏—è ‚Äî 1", "—Å–µ—Å—Å–∏—è ‚Äî 2", "—Å–µ—Å—Å–∏—è ‚Äî 3", "—Å–µ—Å—Å–∏—è ‚Äî 4", "—Å–µ—Å—Å–∏—è ‚Äî 5"], lower=True)
async def connection_session(ans: Message):
	sessions_list = [
	["–°–µ—Å—Å–∏—è ‚Äî 1","first_session"],
	["–°–µ—Å—Å–∏—è ‚Äî 2","second_session"],
	["–°–µ—Å—Å–∏—è ‚Äî 3","third_session"],
	["–°–µ—Å—Å–∏—è ‚Äî 4","fourth_session"],
	["–°–µ—Å—Å–∏—è ‚Äî 5","fiveth_session"]
	]
	for sess in sessions_list:
		session_player = await conn.fetch("SELECT %s,status_player FROM * WHERE id=%s" % (sess[1],ans.from_id))
		if sess[0] == ans.text and (session_player<100 or (session_player<99 and session_player[0]["status_player"] >= ...)):
			await ans("üî∏–í—ã –∑–∞—à–ª–∏ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä")
			break
		elif sess[0]==ans.text:
			house_button = [
				[{'text':'–î–æ–º–æ–π', 'color':'positive'}]
			]
			house_keyboard=keyboard_gen(house_button,inline=True)
			await ans("üî∏–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ", keyboard=house_keyboard)
			break

@bot.branch.cls_branch("market_branch")
class Branch(ClsBranch):
	@rule_disposal(VBMLRule("–≤—ã–π—Ç–∏", lower=True))
	async def exit_market_branch(self, ans: Message):
		exit_market_button = [
			[{'text':'–î–æ–º–æ–π', 'color':'positive'}]
		]
		exit_market_keyboard = keyboard_gen(exit_market_button, inline=True)
		await ans("–û–∫–µ–π, –≤—ã—Ö–æ–¥–∏–º!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <<–î–æ–º–æ–π>>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è", keyboard=exit_market_keyboard, attachment=...)
		await bot.branch.exit(ans.peer_id)

	@rule_disposal(VBMLRule("<ammount_gold:int>", lower=True))
	async def buy_valuts_branch(self, ans: Message, ammount_gold):
		pass

	@rule_disposal(VBMLRule("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã", lower=True))
	async def check_buy_valuts_branch(self, ans: Message):
		check_buy_valuts_button = [
			[{'text':'–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã', 'color':'positive'}],
			[{'text':'–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã', 'color':'negative'}]
		]
		check_buy_valuts_keyboard = keyboard_gen(check_buy_valuts_button, inline=True)
		await ans("–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥!", keyboard=check_buy_valuts_keyboard)

	@rule_disposal(VBMLRule("–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã", lower=True))
	async def cancel_buy_valuts_branch(self, ans: Message):
		if ...:
			pass
		else:
			pass

	async def round_buy_valuts_branch(self, ans: Message, *args):
		round_buy_valuts_button = [
			[{'text':'1000','color':'positive'}, {'text':'2500','color':'positive'}],
			[{'text':'5000','color':'positive'}, {'text':'10000','color':'positive'}],
			[{'text':'–í—ã–π—Ç–∏', 'color':'positive'}]
		]
		round_buy_valuts_keyboard = keyboard_gen(round_buy_valuts_button, inline=True)
		await ans("üî∏–ü—Ä–æ–¥–∞–≤–µ—Ü - '–Ø –Ω–µ –ø–æ–Ω—è–ª, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?'\nüî∏–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –Ω–µ –±–æ–ª—å—à–µ 900–∫! –¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç, –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É", keyboard=round_buy_valuts_keyboard, attachment=...)

@bot.on.message(text=["–º–∞–≥–∞–∑–∏–Ω", "!–º–∞–≥–∞–∑–∏–Ω", "! –º–∞–≥–∞–∑–∏–Ω", "/–º–∞–≥–∞–∑–∏–Ω", "/ –º–∞–≥–∞–∑–∏–Ω"], lower=True)
async def join_market(ans: Message):
	join_market_button = [
		[{'text':'1000','color':'positive'}, {'text':'2500','color':'positive'}],
		[{'text':'5000','color':'positive'}, {'text':'10000','color':'positive'}],
		[{'text':'–í—ã–π—Ç–∏', 'color':'negative'}]
	]
	join_market_keyboard = keyboard_gen(join_market_button, inline=True)
	await ans("üî∏–í—ã –ø—Ä–∏—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –±–æ—Ç–∞, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–æ–ª–æ—Ç—ã–µ –º–æ–Ω–µ—Ç—ã\nüî∏–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É\n\nüîπ–û—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–∞–ª—é—Ç 1:10 (—Ä—É–±–ª—å:–≥–æ–ª–¥–µ)\n\n100‚ÇΩ ‚Äî 1000üî∂\n250‚ÇΩ ‚Äî 2500üî∂\n500‚ÇΩ ‚Äî 5000üî∂\n1000‚ÇΩ ‚Äî 10000üî∂\n\nüî∏–ú–∞–∫—Å –ø–æ–∫—É–ø–∫–∞ –≥–æ–ª–¥—ã ‚Äî 900000üî∂", keyboard=join_market_keyboard, attachment=...)
	await bot.branch.add(ans.peer_id, "market_branch")

@bot.on.message(text=["–º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "!–º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "! –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "/–º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "/ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"],lower=True)
async def my_date(ans: Message):
	my_date_button = [
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	]
	my_date_keyboard = keyboard_gen(my_date_button,inline=True)
	await ans("üî∏–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", keyboard=my_date_keyboard, attachment=...)

@bot.on.message(text=["–ø–æ–º–æ—â—å", "!–ø–æ–º–æ—â—å", "! –ø–æ–º–æ—â—å", "/–ø–æ–º–æ—â—å", "/ –ø–æ–º–æ—â—å"],lower=True)
async def help(ans: Message):
	help_button = [
		[{'text':'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç', 'color':'positive'}],
		[
			{'text':'–°—Ç–∞—Ç—å—è', 'type':'open_link',
				'link':'https://vk.com/@glambot-o-glambot-i-dalneishem-razvitii-new'},
			{'text':'–û—Ñ—ë—Ä—Ç–∞', 'type':'open_link',
				'link':'https://docs.google.com/document/d/1E2RNytuavppM3eXA76AIxAWBbKhSCCEnbUaTf85QgjI/edit?usp=drivesdk'}
		],
		[{'text':'–†–∞—Å—Å—ã–ª–∫–∞', 'color':'positive'}, {'text':'–ê–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞', 'color':'positive'}],
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	]
	help_keyboard = keyboard_gen(help_button, inline=True)
	await ans("üî∏–í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\nüî∏–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é\nüî∏–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥–∏,—á–∏—Ç–µ—Ä–æ–≤ –∏ —Ç.–ø - –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–ø–æ—Ä—Ç\nüî∏–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\nüî∏–ú–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –æ—Ñ—ë—Ä—Ç—É –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", keyboard=help_keyboard)
