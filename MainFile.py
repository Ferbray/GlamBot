'''Need:
	
üî∏Finish writing locations for using the tortoise module

'''

import json
import os
import shutil
import random
import re
import ssl
from time import ctime,time
from decimal import Decimal
from operator import itemgetter

from vkbottle import Bot, Message, keyboard_gen, VKError
from vkbottle.branch import ClsBranch, ExitBranch, rule_disposal, Branch
from vkbottle.rule import AbstractMessageRule, VBMLRule
from vkbottle.keyboard import Keyboard, Text
from vbml import PatchedValidators
from tortoise import Tortoise
from aiohttp import ClientSession
import asyncio
import aioqiwi

from qiwi_wrapper import qiwi_payment, qiwi_history
from tortoise_models import Main, Multiplayer, Rocket, Building, Inventory, MessChat, Settings, Session, MultiplayerBranch
from ImageEngine import ElipsAva, WritePersProfile, WriteTopPlayer

bot = Bot('9c6713c47ccc55cbbb5ba7b712c1a8a5e7c3c419da361d12f60dfd27ad3c882ed28c344b898193733989b', mobile=False)

async def get_info(upload_url: str, files: dict):
	async with ClientSession(json_serialize=json.dumps) as client:
		async with client.post(upload_url, ssl=ssl.SSLContext(), data=files) as r:
			response = await r.read()
	return json.loads(response)

async def UpPhoto(ans, img_name):
	upload_info = await bot.api.photos.get_messages_upload_server(peer_id=ans.from_id)
	upload_task = bot.loop.create_task(get_info(
		upload_info.upload_url, files={'photo': open(img_name, "rb")})
	)
	upload_result = await upload_task
	serv_xy_map = await bot.api.photos.save_messages_photo(photo=upload_result["photo"], 
														server=upload_result["server"], 
														hash=upload_result["hash"])

	xymap = "photo{}_{}".format(serv_xy_map[0].owner_id, serv_xy_map[0].id)
	return xymap

async def DownloadPhoto(user_id):
	try:
		vk = await bot.api.users.get(user_ids=user_id, fields="photo_400_orig")
	
		async with ClientSession() as session:
			async with session.get(vk[0].photo_400_orig) as response:
				content = await response.read()
		
		cut_url = vk[0].photo_400_orig.split("/")[-1]
		name_ava = cut_url.split('.')[0]
		
		with open(f"PhotoDatePlayers/{user_id}/{name_ava} orig_400.png", 'wb') as fh:
			fh.write(content)

		return name_ava

	except:
		return False

@bot.on.pre_process()
async def registration(ans: Message):
	if await Main.get_or_none(user_id=ans.from_id) is None:
		await bot.branch.add(ans.peer_id, 'reg_branch')

@bot.branch.cls_branch("reg_branch")
class Branch(ClsBranch):
	@rule_disposal(VBMLRule(["–ú—É–∂—Å–∫–æ–π","–ñ–µ–Ω—Å–∫–∏–π"], lower=True))
	async def exit_branch(self, ans: Message):

		os.mkdir(f"PhotoDatePlayers/{ans.from_id}")

		name_ava = await DownloadPhoto(ans.from_id)

		if name_ava is False:
			shutil.copy('materials_bot/NoPhoto orig_400.png', f"PhotoDatePlayers/{ans.from_id}")
			await ans("–£ –≤–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏, –≤–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —ç—Ç–∞!", attachment="photo-191374726_457239031")
			name_ava = "NoPhoto"

		ElipsAva(ans.from_id, name_ava)
		vk_name = (await bot.api.users.get(user_ids=ans.from_id))[0].first_name

		current_time = round(time())

		WritePersProfile([
			vk_name, str(ans.from_id), "500",
			"0", "57", "76", "72", 
			"30", "56", "17"
		])

		await Main.create(
			user_id=ans.from_id, 
			user_nick=vk_name, 
			user_gender=(1 if ans.text=='–ñ–µ–Ω—Å–∫–∏–π' else 0),
			date_reg=current_time,
			user_progress=json.dumps(
				[0, 1]
			),
			user_balance=json.dumps(
				[500, 0]
			),
			payment_state=json.dumps(
				[0, 0]
			)
		)

		await Multiplayer.create(
			user_id=ans.from_id,
			user_health=[57, 100],
			user_satiety=[72, 100],
			user_dehydration=[30, 100],
			user_cheerfulness=[56, 100],
			user_radioactivity=[76, 100],
			user_energy=[4, 10],
			user_tickets=[3, 0]
		)

		await Rocket.create(
			user_id=ans.from_id, 
			rocket_name='–¢—Ä–∏—Ç–æ–Ω 8',
			places_free=[
				[0, 0, 0, 0],
				[0, 0, 0, 0]
			]
		)#TODO : fill in the places free

		await Inventory.create(
			user_id=ans.from_id,
			feature_armors=[
				[1, 90, 10],
				[1, 18, 3],
				[1, 22, 1],
				[1, 17, 1],
				[1, 23, 2],
			],
			backpack_cells=[
				[1, 12]
			]
		)

		await Settings.create(
			user_id=ans.from_id
		)

		end_reg_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π','color':'positive'}]
		], inline=True)

		await ans("üî∏–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
			f"üî∏–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ - {ans.text[:-2]}–æ–≥–æ —Ä–æ–¥–∞\n"
			"üî∏–í–∞–º –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è - –î–æ–º–æ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë", 
			keyboard=end_reg_keyboard, attachment=f'PhotoDatePlayers/{ans.from_id}/{ans.from_id} profile.png')
		await bot.branch.exit(ans.peer_id)

	async def branch(self, ans: Message):
		replay_reg_keyboard = keyboard_gen([
			[{'text':'–°—Ç–∞—Ç—å—è', 'type':'open_link',
				'link':'https://vk.com/@glambot-o-glambot-i-dalneishem-razvitii-new'},
				{'text':'–û—Ñ—ë—Ä—Ç–∞', 'type':'open_link',
					'link':'https://docs.google.com/document/d/1E2RNytuavppM3eXA76AIxAWBbKhSCCEnbUaTf85QgjI/edit?usp=drivesdk'}
			],
			[{'text':'–ú—É–∂—Å–∫–æ–π','color':'positive'}],
			[{'text':'–ñ–µ–Ω—Å–∫–∏–π', 'color':'primary'}]
		], inline=True)
		await ans("üî∏–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GlamBot-–∞!\n\n"
			"üî∏–°–µ–π—á–∞—Å –≤—ã –¥–æ–ª–∂–Ω—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –æ—Ñ–µ—Ä—Ç–æ–π –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—å—é\n"
			"üî∏–ü–æ—Ç–æ–º –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
			"üî∏–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!\n\n\n"
			"!!!–ü—Ä–æ–¥–æ–ª–∂–∞—è –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–æ—Ç–µ –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å –æ—Ñ–µ—Ä—Ç–æ–π!!!",  
			keyboard=replay_reg_keyboard)#TODO ATTACHMENT ABOUT REPLAY REGISTRATION

@bot.on.message(text=["–¥–æ–º–æ–π", "!–¥–æ–º–æ–π", "! –¥–æ–º–æ–π", "/–¥–æ–º–æ–π", "/ –¥–æ–º–æ–π"], lower=True)
async def home(ans: Message):
	house_button = [
		[{'text':'–ù–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä','color':'positive'}],
		[{'text':'–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'color':'primary'}, {'text':'–ú–∞–≥–∞–∑–∏–Ω','color':'primary'}],
		[{'text':'–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', 'color':'positive'}, {'text':'–ü–æ–º–æ—â—å', 'color':'positive'}]
	]
	house_keyboard = keyboard_gen(house_button, inline=True)
	await ans("üî∏–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ–º ‚Äî —ç—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –æ—Ç –º—É–ª—Ç—å—Ç–∏–ø–ª–µ–µ—Ä–∞\n\n"
		   "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
		   "üîπ–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É\n"
		   "üîπ–£–∑–Ω–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n"
		   "üîπ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
		   "üîπ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", 
		   keyboard=house_keyboard, attachment="photo-191374726_457239029")

@bot.on.message(text=["—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "!—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "! —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", 
					  "/—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "/ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"], lower=True)
async def top_players(ans: Message):
	'''–ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏'''
	top_users = [[pers.user_nick, pers.user_id, pers.user_balance[0]] async for pers in Main.all()]
	top_users.sort(key=itemgetter(2), reverse=True)

	user_data = await Main.get(user_id=ans.from_id)
	user_data = [user_data.user_nick, user_data.user_id, user_data.user_balance[0]]

	my_top = top_users.index(user_data)+1

	top_10 = top_users[0:9]

	if my_top>8:
		top_10.append(user_data)

	WriteTopPlayer(top_10, my_top, ans.from_id)
	photo_top_output = await UpPhoto(ans, f'PhotoDatePlayers/{ans.from_id}/{ans.from_id} top_player.png')

	top_keyboard = keyboard_gen([
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	], inline=True)
	await ans("üî∏–í–∞–º –ø–æ–∫–∞–∑–∞–Ω —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ GlamBot-–∞\n"
	"üî∏–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å–∞–º—ã–µ –≤–µ–ª–∏—á–∞–π—à–∏–µ –±–æ–π—Ü—ã",
	keyboard=top_keyboard, attachment=photo_top_output)

@bot.on.message(text=["–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", "!–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", "! –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", 
					  "/–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", "/ –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä"], lower=True)
async def find_server(ans: Message):

	feature_sessions = [
		["–°–µ—Å—Å–∏—è ‚Äî 1", 1],
		["–°–µ—Å—Å–∏—è ‚Äî 2", 1],
		["–°–µ—Å—Å–∏—è ‚Äî 3", 1],
		["–°–µ—Å—Å–∏—è ‚Äî 4", 0],
		["–°–µ—Å—Å–∏—è ‚Äî 5", 0]
	]

	urls_photos = [
		"photo-191374726_457239032",
		"photo-191374726_457239033",
		"photo-191374726_457239034",
		"photo-191374726_457239035",
		"photo-191374726_457239036",
		"photo-191374726_457239037",
		"photo-191374726_457239038"
	]

	load_sessions = ""

	for sess in feature_sessions:
		if await Session.get_or_none(name=sess[0]) is None:
			await Session.create(
				name=sess[0],
				category=sess[1],
				players_id=[]
			)

		status_player = (await Main.get(user_id=ans.from_id)).user_status
		now_players = len((await Session.get(name=sess[0])).players_id)

		light_bulb_load = ("üíö" if now_players<=40 else 
					 ("üß°" if now_players<80 else "‚ù§Ô∏è"))
		load_sessions += f"{sess[0]}\nüë•–ò–≥—Ä–æ–∫–æ–≤ ‚Äî [0/{now_players}]{light_bulb_load}\n"


	sessions_button = [
		[{'text':'–°–µ—Å—Å–∏—è ‚Äî 1','color':'positive'}, {'text':'–°–µ—Å—Å–∏—è ‚Äî 2', 'color':'positive'}],
		[{'text':'–°–µ—Å—Å–∏—è ‚Äî 3','color':'positive'}, {'text':'–°–µ—Å—Å–∏—è ‚Äî 4', 'color':'positive'}], 
		[{'text':'–°–µ—Å—Å–∏—è ‚Äî 5', 'color':'positive'}, {'text':'–î–æ–º–æ–π', 'color':'negative'}]
	]
	session_keyboard = keyboard_gen(sessions_button, inline=True)
	await ans("üî∏–≠—Ç–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏ - –±–ª–∞–≥–æ–¥–∞—Ä—è –∏–º –≤—ã —Å –¥—Ä—É–≥–æ–º –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ\n"
		   "–¢–∞–∫ –∂–µ —Å–µ—Å—Å–∏–∏ –Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –≤ –ª–æ–∫–∞—Ü–∏—è—Ö\n"
		   "üî∏–ü–æ–∫—É–ø–∞—è —Å—Ç–∞—Ç—É—Å ‚Äî ..., –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–µ—Å—Å–∏—é —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–æ 120 —á–µ–ª–æ–≤–µ–∫\n\n"
		   f"üîπ–°–µ—Å—Å–∏–∏:\n{load_sessions}", 
		   keyboard=session_keyboard, attachment=urls_photos[random.randint(0,6)])

@bot.on.message(text=["—Å–µ—Å—Å–∏—è ‚Äî 1", "—Å–µ—Å—Å–∏—è ‚Äî 2", "—Å–µ—Å—Å–∏—è ‚Äî 3", "—Å–µ—Å—Å–∏—è ‚Äî 4", "—Å–µ—Å—Å–∏—è ‚Äî 5"], lower=True)
async def connection_session(ans: Message):
	'''–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä'''
	feature_session = [
	["–°–µ—Å—Å–∏—è ‚Äî 1", 1],
	["–°–µ—Å—Å–∏—è ‚Äî 2", 1],
	["–°–µ—Å—Å–∏—è ‚Äî 3", 1],
	["–°–µ—Å—Å–∏—è ‚Äî 4", 0],
	["–°–µ—Å—Å–∏—è ‚Äî 5", 0]
	]
	for sess in feature_session:
		if await Session.get_or_none(name=sess[0]) is None:
			await Session.create(
				name=sess[0],
				category=sess[1],
				players_id=[]
			)
		status_player = (await Main.get(user_id=ans.from_id)).user_status
		user_mult = await Multiplayer.get(user_id=ans.from_id)
		session_data = await Session.get(name=sess[0])
		now_players = session_data.players_id

		if sess[0] == ans.text and (len(now_players)<80 or 
							  (len(now_players)<100 and status_player >= 2)):
			user_mult.session_num = int(sess[0][:-1])
			session_data.players_id = now_players.append(ans.from_id)
			await session_data.save()
			await user_mult.save()

			await bot.branch.add(ans.peer_id, "multiplayer_branch")
			break

		elif sess[0]==ans.text:
			house_keyboard=keyboard_gen([
				[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
			], inline=True)
			await ans("üî∏–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ", 
			 keyboard=house_keyboard)#TODO ATTACHMENT
			break

@bot.branch.cls_branch("market_branch")
class Branch(ClsBranch):
	@rule_disposal(VBMLRule("–í—ã–π—Ç–∏", lower=True))
	async def exit_branch(self, ans: Message):
		exit_market = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'positive'}]
		], inline=True)
		await ans("–û–∫–µ–π, –≤—ã—Ö–æ–¥–∏–º!\n"
			"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <<–î–æ–º–æ–π>>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è", 
			keyboard=exit_market)#TODO ATTACHMENT
		await bot.branch.exit(ans.peer_id)

	@rule_disposal(VBMLRule("<ammount_gold:int>", lower=True))
	async def buy_valutes_branch(self, ans: Message, ammount_gold):
		current_time = round(time())
		trans_ruble = (1 if ammount_gold<=10 else 
				 (ammount_gold/10 if ammount_gold<=900000 else 90000))

		link_payment = await qiwi_payment(current_time, trans_ruble)

		player_data = await Main.get(user_id=ans.from_id)
		payment_data = player_data.payment_state
		payment_data[0], payment_data[1] = trans_ruble, current_time
		player_data.payment_state = payment_data
		await player_data.save()
		buy_valutes_button = [
			[{'text': '–ù–ê–ñ–ò–ú–ê–ô –°–Æ–î–ê!', 'type': 'open_link', 'link': str(link_payment)}], 
			[{'text':'–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã', 'color':'positive'}],
			[{'text':'–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã', 'color':'negative'}]
		]
		buy_valutes_keyboard = keyboard_gen(buy_valutes_button, inline=True)
		await ans("1Ô∏è‚É£–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ\n"
			"üî∏–ó–∞ –≤–∞—Å –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –¥—Ä—É–≥\n\n"
			"2Ô∏è‚É£–°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω—É\n"
			"üî∏–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∏ –Ω–∞–∂–º—ë—Ç–µ –Ω–∞ –æ—Ç–º–µ–Ω—É, —Ç–æ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–ø–∞–¥—É—Ç‚ùó\n"
			"üî∏–ù–∞–∂–∏–º–∞–π—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –∏–Ω–∞—á–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–ø–∞–¥–µ—Ç‚ùó\n\n", 
			keyboard=buy_valutes_keyboard)#TODO ATTACHMENT

	@rule_disposal(VBMLRule("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã", lower=True))
	async def payment_state_branch(self, ans: Message):
		player_data = await Main.get(user_id=ans.from_id)
		payment_data = player_data.payment_state
		player_balance = player_data.user_balance

		if await qiwi_history(payment_data[1]) is True:
			player_balance[1] += payment_data[0]*10
			player_data.user_balance = player_balance
			player_data.payment_state = [0, 0]
			await player_data.save()

			accept_val_keyboard = keyboard_gen([
				[{'text':'–î–æ–º–æ–π', 'color':'positive'}]
			], inline=True)
			await ans("üî∏–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –≤–∞–ª—é—Ç—É\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <<–î–æ–º–æ–π>>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è", 
			 keyboard=accept_val_keyboard)#TODO ATTACHMENT
			await bot.branch.exit(ans.peer_id)

		else:
			check_buy_keyboard = keyboard_gen([
				[{'text':'–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã', 'color':'positive'}],
				[{'text':'–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã', 'color':'negative'}]
			], inline=True)
			await ans("–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥!", 
			 keyboard=check_buy_keyboard)#TODO ATTACHMENT

	@rule_disposal(VBMLRule("–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã", lower=True))
	async def cancel_buy_valuts_branch(self, ans: Message):
		player_data = await Main.get(user_id=ans.from_id)
		payment_data = player_data.payment_state
		player_balance = player_data.user_balance

		if await qiwi_history(payment_data[1]) is True:
			player_balance[1] += payment_data[0]*10
			player_data.user_balance = player_balance

		player_data.payment_state = [0, 0]
		await player_data.save()

		buy_valutes_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		], inline=True)
		await ans("üî∏–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞ –∑–∞ –ø–æ–∫—É–ø–∫–∞–º–∏", 
			keyboard=buy_valutes_keyboard)#TODO ATTACHMENT
		await bot.branch.exit(ans.peer_id)

	async def branch(self, ans: Message):
		round_buy_button = [
			[{'text':'1000','color':'positive'}, {'text':'2500','color':'positive'}],
			[{'text':'5000','color':'positive'}, {'text':'10000','color':'positive'}],
			[{'text':'–í—ã–π—Ç–∏', 'color':'primary'}]
		]
		round_buy_keyboard = keyboard_gen(round_buy_button, inline=True)
		await ans("üî∏–í—ã –ø—Ä–∏—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –±–æ—Ç–∞, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–æ–ª–æ—Ç—ã–µ –º–æ–Ω–µ—Ç—ã\n"
		   "üî∏–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É\n\n"
		   "üîπ–û—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–∞–ª—é—Ç 1:10 (—Ä—É–±–ª—å:–≥–æ–ª–¥–µ)\n\n"
		   "100‚ÇΩ ‚Äî 1000üî∂\n"
		   "250‚ÇΩ ‚Äî 2500üî∂\n"
		   "500‚ÇΩ ‚Äî 5000üî∂\n"
		   "1000‚ÇΩ ‚Äî 10000üî∂\n\n"
		   "üî∏–ú–∞–∫—Å –ø–æ–∫—É–ø–∫–∞ –≥–æ–ª–¥—ã ‚Äî 900000üî∂", 
			keyboard=round_buy_keyboard, attachment="photo-191374726_457239030")

@bot.on.message(text=["–º–∞–≥–∞–∑–∏–Ω", "!–º–∞–≥–∞–∑–∏–Ω", "! –º–∞–≥–∞–∑–∏–Ω", "/–º–∞–≥–∞–∑–∏–Ω", "/ –º–∞–≥–∞–∑–∏–Ω"], lower=True)
async def join_market(ans: Message):
	round_buy_button = [
		[{'text':'1000','color':'positive'}, {'text':'2500','color':'positive'}],
		[{'text':'5000','color':'positive'}, {'text':'10000','color':'positive'}],
		[{'text':'–í—ã–π—Ç–∏', 'color':'primary'}]
	]
	round_buy_keyboard = keyboard_gen(round_buy_button, inline=True)
	await ans("üî∏–í—ã –ø—Ä–∏—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –±–æ—Ç–∞, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–æ–ª–æ—Ç—ã–µ –º–æ–Ω–µ—Ç—ã\n"
		"üî∏–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É\n\n"
		"üîπ–û—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–∞–ª—é—Ç 1:10 (—Ä—É–±–ª—å:–≥–æ–ª–¥–µ)\n\n"
		"100‚ÇΩ ‚Äî 1000üî∂\n"
		"250‚ÇΩ ‚Äî 2500üî∂\n"
		"500‚ÇΩ ‚Äî 5000üî∂\n"
		"1000‚ÇΩ ‚Äî 10000üî∂\n\n"
		"üî∏–ú–∞–∫—Å –ø–æ–∫—É–ø–∫–∞ –≥–æ–ª–¥—ã ‚Äî 900000üî∂", 
		keyboard=round_buy_keyboard, attachment="photo-191374726_457239030")
	await bot.branch.add(ans.peer_id, "market_branch")

@bot.on.message(text="–æ—Ç–≤–µ—Ç–∏—Ç—å <id_player:int>", lower=True)
async def my_date(ans: Message, id_player):
	if ans.from_id == 185031237:
		allowed_keyboard = keyboard_gen([
			[{'text':'–í—ã–π—Ç–∏', 'color':'negative'}]
		], inline=True)
		await ans("üî∏–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞\n"
			"üî∏–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç",
			keyboard=allowed_keyboard)#TODO ATTACHMENT
		await bot.branch.add(ans.peer_id, "root_branch", id_mail_player=id_player)

	else:
		access_denied_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		], inline=True)
		await ans("‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", keyboard=access_denied_keyboard)

@bot.on.message(text="–∑–∞–±–∞–Ω–∏—Ç—å —Ä–µ–ø <id_player:int>", lower=True)
async def my_date(ans: Message, id_player):
	if ans.from_id == 185031237:
		accept_ban_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		], inline=True)
		user_data = await Main.get(user_id=ans.from_id)
		user_data.timeout_ban2 = 1
		await user_data.save()
		await ans("üî∏–†–µ–ø–æ—Ä—Ç –∏–≥—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω\n",
			keyboard=accept_ban_keyboard)#TODO ATTACHMENT

	else:
		access_denied_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		], inline=True)
		await ans("‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", keyboard=access_denied_keyboard)

@bot.branch.cls_branch("root_branch")
class Branch(ClsBranch):
	@rule_disposal(VBMLRule("–í—ã–π—Ç–∏", lower=True))
	async def exit_branch(self, ans: Message):
		exit_root_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'positive'}]
		], inline=True)
		await ans("–û–∫–µ–π, –≤—ã—Ö–æ–¥–∏–º!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <<–î–æ–º–æ–π>>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è", 
			keyboard=exit_root_keyboard)#TODO ATTACHMENT
		await bot.branch.exit(ans.peer_id)

	@rule_disposal(VBMLRule("<root_text>", lower=True))
	async def send_root_branch(self, ans: Message, id_mail_player, root_text):
		if len(root_text)>=2 and len(root_text)<=100:
			accept_root_keyboard = keyboard_gen([
				[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
			], inline=True)
			
			root_keyboard = keyboard_gen([
				[{'text': f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç', 'color':'positive'}]
			], inline=True)
			nick_player_report = (await bot.api.users.get(user_ids=ans.from_id))[0].first_name
			rand_report = random.randint(-2e9,2e9)
			await bot.api.messages.send(user_id=id_mail_player, 
							   random_id=rand_report, 
							   message=(f"–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–ø–æ—Ä—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ @id{ans.from_id}({nick_player_report})\n\n\n"
										"–ï–≥–æ –∏–¥:{ans.from_id}\n\n"
										"–û–Ω –æ—Ç–≤–µ—Ç–∏–ª:\n"
										"<<{root_text}>>"),
							   keyboard=root_keyboard)#TODO ATTACHMENT
			await ans(f'üéâ–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n\n\n <<{root_text}>> !', 
						keyboard=accept_root_keyboard)#TODO ATTACHMENT
			await bot.branch.exit(ans.from_id)

		else:
			error_send_keyboard = keyboard_gen([
				[{'text':'–í—ã–π—Ç–∏', 'color':'negative'}]
			], inline=True)
			await ans("‚ùå–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É\n"
			 "üè∑Ô∏è–î–ª–∏–Ω–∞ - –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤!\n\n"
			 "üî∏–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç", 
			 keyboard=error_send_keyboard)#TODO ATTACHMENT

@bot.on.message(text=["–º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "!–º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "! –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "/–º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "/ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"], lower=True)
async def my_date(ans: Message):
	'''–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è

	üî∏–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–æ–¥—É–ª–∏
	üî∏OpenGL + Pillow + Pillow-SMID/numpy

	'''
	user_data1 = await Main.get(user_id=ans.from_id)
	user_data2 = await Multiplayer.get(user_id=ans.from_id)
	WritePersProfile([
		user_data1.user_nick,
		user_data1.user_id,
		user_data1.user_balance[0],
		user_data1.user_balance[1],
		round(user_data2.user_health[0]/user_data2.user_health[1]*100),
		round(user_data2.user_radioactivity[0]/user_data2.user_radioactivity[1]*100),
		round(user_data2.user_satiety[0]/user_data2.user_satiety[1]*100),
		round(user_data2.user_dehydration[0]/user_data2.user_dehydration[1]*100),
		round(user_data2.user_cheerfulness[0]/user_data2.user_cheerfulness[1]*100),
		user_data2.user_protection

	])
	accept_profile = await UpPhoto(ans, f'PhotoDatePlayers/{ans.from_id}/{ans.from_id} profile.png')
	my_date_keyboard = keyboard_gen([
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	], inline=True)

	await ans("üî∏–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", keyboard=my_date_keyboard, attachment=accept_profile)#TODO ATTACHMENT

@bot.branch.cls_branch("report_branch")
class Branch(ClsBranch):
	@rule_disposal(VBMLRule("–í—ã–π—Ç–∏", lower=True))
	async def exit_branch(self, ans: Message):
		exit_report_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'positive'}]
		], inline=True)
		await ans("–û–∫–µ–π, –≤—ã—Ö–æ–¥–∏–º!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <<–î–æ–º–æ–π>>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è", 
			keyboard=exit_report_keyboard)#TODO ATTACHMENT
		await bot.branch.exit(ans.peer_id)

	@rule_disposal(VBMLRule("<report_text>", lower=True))
	async def send_report_branch(self, ans: Message, report_text):
		if len(report_text)>=10 and len(report_text)<=50:

			accept_report_keyboard = keyboard_gen([
				[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
			], inline=True)
			
			root_keyboard = keyboard_gen([
				[{'text': f'–û—Ç–≤–µ—Ç–∏—Ç—å {ans.from_id}', 'color':'positive'}],
				[{'text': f'–ó–∞–±–∞–Ω–∏—Ç—å —Ä–µ–ø {ans.from_id}', 'color':'negative'}]
			], inline=True)
			nick_player_report = (await bot.api.users.get(user_ids=ans.from_id))[0].first_name
			rand_report = random.randint(-2e9,2e9)
			await bot.api.messages.send(user_id=185031237, 
							   random_id=rand_report, 
							   message=(f"–í–∞–º –ø—Ä–∏—à–µ–ª —Ä–µ–ø–æ—Ä—Ç –æ—Ç –∏–≥—Ä–æ–∫–∞ @id{ans.from_id}({nick_player_report})\n\n\n"
										"–ï–≥–æ –∏–¥:{ans.from_id}\n\n"
										"–û–Ω —Ö–æ—á–µ—Ç —Å–ø—Ä–æ—Å–∏—Ç—å:\n"
										"<<{report_text}>>"),
							   keyboard=root_keyboard)#TODO ATTACHMENT
			await ans(f'üéâ–í–∞—à —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞:\n\n\n <<{report_text}>> !', 
						keyboard=accept_report_keyboard)#TODO ATTACHMENT
			await bot.branch.exit(ans.from_id)

		else:
			error_send_keyboard = keyboard_gen([
				[{'text':'–í—ã–π—Ç–∏', 'color':'negative'}]
			], inline=True)
			await ans("‚ùå–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É\n"
			 "üè∑Ô∏è–î–ª–∏–Ω–∞ - –æ—Ç 10 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤!\n\n"
			 "üî∏–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–ø–æ—Ä—Ç", 
			 keyboard=error_send_keyboard)#TODO ATTACHMENT

@bot.on.message(text=["–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", "!–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", "! –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", 
					  "/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", "/ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç"], lower=True)
async def send_report(ans: Message):
	if await Main.get(user_id=ans.from_id).timeout_ban2==0:
		send_report_keyboard = keyboard_gen([
			[{'text':'–í—ã–π—Ç–∏', 'color':'negative'}]
		], inline=True)
		await ans("üî∏–í—ã –∑–∞—à–ª–∏ –≤ –±–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞,\n"
			"üî∏–ï–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
			"–®–∞–±–ª–æ–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
			"–í —á–∞—Ç–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
			"üî∏–¢–µ–∫—Å—Ç —Ä–µ–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–µ–Ω—å—à–µ 50!\n"
			"!!!–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–µ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–º–∏ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∞–º/—Ñ–ª—É–¥, —Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ø—Ä–∞–≤–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–∞–º —Ä–µ–ø–æ—Ä—Ç!!!", 
			keyboard=send_report_keyboard)#TODO ATTACHMENT
		await bot.branch.add(ans.peer_id, "report_branch")

	else:
		access_denied_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		], inline=True)
		await ans("‚ùå–£ –≤–∞—Å –∑–∞–±–∞–Ω–µ–Ω —Ä–µ–ø–æ—Ä—Ç", keyboard=access_denied_keyboard)#TODO ATTACHMENT AND FIX BAD CODE

@bot.on.message(text=["–∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞", "!–∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞", "! –∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞", 
					  "/–∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞", "/ –∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞"], lower=True)
async def admin_mailing(ans: Message):
	if ans.from_id == 185031237:
		admin_mail_keyboard = keyboard_gen([
			[{'text':'–û—Ç–º–µ–Ω–∏—Ç—å', 'color':'negative'}]
		], inline=True)
		await ans("üî∏–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
			"–®–∞–±–ª–æ–Ω\n"
			"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏, —É –Ω–∞—Å –∞–∫—Ü–∏—è –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã!\n\n"
			"üîπ–ë–æ–ª—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–µ–Ω—å—à–µ 500 —Å–∏–º–≤–æ–ª–æ–≤",
			keyboard=ad_mail_keyboard)#TODO ATTACHMENT
		await bot.branch.add(ans.from_id, 'admin_mailing_branch')

	else:
		refusal_adm_mail_but = [
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		]
		refusal_adm_mail_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		], inline=True)
		await ans("‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", keyboard=refusal_adm_mail_keyboard)#TODO ATTACHMENT

@bot.branch.cls_branch('admin_mailing_branch')
class Branch(ClsBranch):
	@rule_disposal(VBMLRule("–û—Ç–º–µ–Ω–∏—Ç—å", lower=True))
	async def exit_branch(self, ans: Message):
		stop_adm_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		], inline=True)
		await ans("üî∏–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
			"üî∏–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø—É—Ç—å", keyboard=stop_adm_keyboard)#TODO ATTACHMENT
		await bot.branch.exit(ans.peer_id)

	@rule_disposal(VBMLRule("<mailing_text>", lower=True))
	async def send_mailing_branch(self, ans: Message, mailing_text):
		if len(mailing_text)>=5 and len(mailing_text)<=500:
			allowed_mailing_player = await StatePlayer.get(indicator_mailing=1)

			accept_mailinig_keyboard = keyboard_gen([
				[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
			], inline=True)
			disconn_mailinig_keyboard = keyboard_gen([
				[{'text':'–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª', 'color':'negative'}]
			], inline=True)

			nick_admin_mailing = (await bot.api.users.get(user_ids=ans.from_id))[0].first_name
			await ans('üéâ–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å')#TODO ATTACHMENT

			for person_date in allowed_mailing_player:
				rand_num_mailing = random.randint(-2e9,2e9)
				await bot.api.messages.send(user_id=person_date.pers_id,
								random_id=rand_num_mailing,
								message=(f"üì¢–í–∞–º –ø—Ä–∏—à–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∞\n\n"
				 "üî∏–í—ã –º–æ–∂–µ—Ç–µ –µ–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–º–æ—â—å\n\n<<{mailing_text}>>", ans.fwd_messages[0].text),
								keyboard=disconn_mailinig_keyboard)#TODO ATTACHMENT

			await ans("üéâ–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å\n\n"
			f"üì¢–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Äî {len(allowed_mailing_player)}üë§", 
			keyboard=accept_mailinig_keyboard)#TODO ATTACHMENT
			await bot.branch.exit(ans.peer_id)

		else:
			error_adm_mailing_keyboard = keyboard_gen([
				[{'text':'–û—Ç–º–µ–Ω–∏—Ç—å', 'color':'negative'}]
			], inline=True)
			await ans("‚ùå–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É\n"
			 "üè∑Ô∏è–î–ª–∏–Ω–∞ - –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤!\n\n"
			 "üî∏–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–ø–æ—Ä—Ç", 
			 keyboard=error_adm_mailing_keyboard)#TODO ATTACHMENT

@bot.on.message(text=["—Ä–∞—Å—Å—ã–ª–∫–∞", "!—Ä–∞—Å—Å—ã–ª–∫–∞", "! —Ä–∞—Å—Å—ã–ª–∫–∞", "/—Ä–∞—Å—Å—ã–ª–∫–∞", 
					  "/ —Ä–∞—Å—Å—ã–ª–∫–∞","—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª"], lower=True)
async def panel_mailing(ans: Message):
	check_indicator_mailing = (await StatePlayer.get(pers_id=ans.from_id)).indicator_mailing
	panel_mailing_keyboard = keyboard_gen([
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	], inline=True)
	message_answer = ("üì¢–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n" 
				 "üî∏–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å —Å–Ω–æ–≤–∞ –≤ –∫—Ä—É–≥—É —Å–æ–±—ã—Ç–∏–π –∏ –Ω–æ–≤–æ—Å—Ç–µ–π, —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É" 
				 if check_indicator_mailing==1 else 
				 "üì¢–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏, –Ω–µ —Å–∫—É—á–∞–ª–∏?\n" 
				 "üîπ–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ –∫–Ω–æ–ø–∫—É")
	diff_indicator_mailing = (1 if check_indicator_mailing==0 else 0)
	await conn.execute(f"UPDATE player_database SET check_indicator_mailing={diff_indicator_mailing} WHERE person_id={ans.from_id}")#FIXED ME
	await ans(message_answer, keyboard=panel_mailing_button)#TODO ATTACHMENT

@bot.on.message(text=["quiet", "!quiet", "! quiet", "/quiet", "/ quiet"], lower=True)
async def quiet(ans: Message):
	if ans.from_id == 185031237:
		await ans([[pers.user_nick, pers.user_id, pers.user_balance, pers.user_status] async for pers in Main.all()])
		await ans([[pers.user_id, pers.user_dehydration] async for pers in Multiplayer.all()])
		await ans([[pers.user_id, pers.places_free] async for pers in Rocket.all()])
		await ans([[pers.user_id, pers.feature_armors] async for pers in Inventory.all()])
		await ans([[pers.user_id, pers.permission_tips] async for pers in Settings.all()])

	else:
		access_denied_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		], inline=True)
		await ans("‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", keyboard=access_denied_keyboard)#FIX BAD CODE

@bot.on.message(text=["del", "!del", "! del", "/del", "/ del"], lower=True)
async def Deleted(ans: Message):
	if ans.from_id == 185031237:
		shutil.rmtree(f"PhotoDatePlayers/{ans.reply_message.from_id}")
		user = await Main.get(user_id=ans.reply_message.from_id)
		await user.delete()

		user = await Multiplayer.get(user_id=ans.reply_message.from_id)
		await user.delete()

		user = await Rocket.get(user_id=ans.reply_message.from_id)
		await user.delete()

		user = await Inventory.get(user_id=ans.reply_message.from_id)
		await user.delete()

		user = await Settings.get(user_id=ans.reply_message.from_id)
		await user.delete()
		await ans("GOOD, ALL GOOD)")#TODO ATTACHMENT

	else:
		access_denied_keyboard = keyboard_gen([
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		], inline=True)
		await ans("‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", keyboard=access_denied_keyboard)#FIX BAD CODE

@bot.on.message(text=["–ø–æ–º–æ—â—å", "!–ø–æ–º–æ—â—å", "! –ø–æ–º–æ—â—å", "/–ø–æ–º–æ—â—å", "/ –ø–æ–º–æ—â—å"], lower=True)
async def help(ans: Message):
	help_button = [
		[{'text':'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç', 'color':'positive'}],
		[
			{'text':'–°—Ç–∞—Ç—å—è', 'type':'open_link',
				'link':'https://vk.com/@glambot-o-glambot-i-dalneishem-razvitii-new'},
			{'text':'–û—Ñ—ë—Ä—Ç–∞', 'type':'open_link',
				'link':'https://docs.google.com/document/d/1E2RNytuavppM3eXA76AIxAWBbKhSCCEnbUaTf85QgjI/edit?usp=drivesdk'}
		],
		[{'text':'–†–∞—Å—Å—ã–ª–∫–∞', 'color':'positive'}, {'text':'–ê–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞', 'color':'positive'}],
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	]
	help_keyboard = keyboard_gen(help_button, inline=True)
	await ans("üî∏–í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n\n"
		   "üîπ–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é\n"
		   "üîπ–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥–∏, —á–∏—Ç–µ—Ä–æ–≤ –∏ —Ç.–ø - –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–ø–æ—Ä—Ç\n"
		   "üîπ–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
		   "üîπ–ú–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –æ—Ñ—ë—Ä—Ç—É –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", 
		   keyboard=help_keyboard)#TODO ATTACHMENT

async def init_tortoise():
	await Tortoise.init(
		db_url="postgres://glamuser:GisMyVoron1974@127.0.0.1:5432/glamdata", 
		modules={"models": ["tortoise_models"]}
	)
	await Tortoise.generate_schemas()

bot.run_polling(on_startup=init_tortoise)