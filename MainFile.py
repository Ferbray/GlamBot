'''Need:
	
üî∏Finish writing locations for using the tortoise module

'''

import json
import os
import shutil
import random
import re
import ssl
from time import ctime,time
from decimal import Decimal
from operator import itemgetter

from vkbottle import Bot, Message, keyboard_gen,VKError
from vkbottle.branch import ClsBranch, ExitBranch, rule_disposal, Branch
from vkbottle.rule import AbstractMessageRule, VBMLRule
from vkbottle.keyboard import Keyboard, Text
from vbml import PatchedValidators
from tortoise import Tortoise
from aiohttp import ClientSession
import asyncio
import aioqiwi

from qiwi_wrapper import qiwi_payment, qiwi_history
from tortoise_models import *
bot = Bot('9c6713c47ccc55cbbb5ba7b712c1a8a5e7c3c419da361d12f60dfd27ad3c882ed28c344b898193733989b', mobile=False)

async def get_info(upload_url: str, files: dict):
	async with ClientSession(json_serialize=json.dumps) as client:
		async with client.post(upload_url, ssl=ssl.SSLContext(), data=files) as r:
			response = await r.read()
	return json.loads(response)

async def UpPhoto(ans, img_name):
	upload_info = await bot.api.photos.get_messages_upload_server(peer_id=ans.from_id)
	upload_task = bot.loop.create_task(get_info(
		upload_info.upload_url, files={'photo': open(img_name, "rb")}
		))
	upload_result = await upload_task
	serv_xy_map = await bot.api.photos.save_messages_photo(photo=upload_result["photo"], 
														server=upload_result["server"], 
														hash=upload_result["hash"])

	xymap = "photo{}_{}".format(serv_xy_map[0].owner_id, serv_xy_map[0].id)
	return xymap

@bot.on.pre_process()
async def registration(ans: Message):
	if await StatePlayer.get_or_none(pers_id=ans.from_id) is None:
		registration_button = [
			[{'text':'–ú—É–∂—Å–∫–æ–π','color':'positive'}],
			[{'text':'–ñ–µ–Ω—Å–∫–∏–π', 'color':'primary'}]
		]
		registration_keyboard = keyboard_gen(registration_button, inline=True)
		await ans("üî∏–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–ª–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\nüî∏–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!", 
			keyboard=registration_keyboard, attachment=...)
		await bot.branch.add(ans.peer_id, 'registration_branch')

@bot.branch.cls_branch("registration_branch")
class Branch(ClsBranch):
	@rule_disposal(VBMLRule(["–ú—É–∂—Å–∫–æ–π","–ñ–µ–Ω—Å–∫–∏–π"], lower=True))
	async def join_registration_branch(self, ans: Message):
		'''–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ

		üî∏–ù–∞–ø–∏—Å–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –¥—Ä—É–≥–∏—Ö –ø–ª—é—Ö
		üî∏–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é

		'''
		os.mkdir(f"PhotoDatePlayers/{ans.from_id}")
		try:
			vk = await bot.api.users.get(user_ids=ans.from_id, fields="photo_400_orig")
			async with ClientSession() as session:
				async with session.get(vk[0].photo_400_orig) as response:
					content = await response.read()

			regfile = vk[0].photo_400_orig.split("/")[-1]
			regfile = regfile.split('.')[0]
			
			with open(f"PhotoDatePlayers/{ans.from_id}/{regfile}.png", 'wb') as fh:
				fh.write(content)

		except:
			shutil.copy('materials_bot/NoPhoto.png', f"PhotoDatePlayers/{ans.from_id}")
			regfile = "NoPhoto"
			no_photo = await UpPhoto(ans, 'materials_bot/NoPhoto.png')
			await ans("–£ –≤–∞—Å –Ω–µ—Ç –∞–≤–∞—Ç–∞—Ä–∫–∏, –≤–∞–º –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —ç—Ç–∞!", attachment=no_photo)

		ElipsAva(ans.from_id, regfile)
		reg_nick_id = (await bot.api.users.get(user_ids=ans.from_id))[0].first_name
		now_time_reg = round(time())
		num_gender_player = (1 if ans.text=='–ñ–µ–Ω—Å–∫–∏–π' else 0)

		# state_list=[ans.from_id,reg_nick_id,"1",race,"0","10",strength,hp,mind,agility,"","","",""]
		# WriteProfil(state_list)
		# inventory_list=[ans.from_id,"0","0","–ë–µ–∑ –æ—Ä—É–∂–Ω—ã–π","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å–≤—É–µ—Ç","–û—Ç—Å—É—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç","–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"]
		# WriteInventory(inventory_list)
		# skills_list=[ans.from_id,"1","[0/30]","1","[0/10]","1","[0/10]","1","[0/10]","1","[0/10]"]
		# WriteSkills(skills_list)

		await StatePlayer.create(
			pers_id=ans.from_id, 
			pers_nick=reg_nick_id, 
			pers_gender=num_gender_player,
			date_reg=now_time_reg,
			protect_arm=...
		)
		
		first_build = [[0, 0],[1001, 1]]

		await PlayerRocket.create(
			pers_id=ans.from_id, 
			name_rocket='–¢—Ä–∏—Ç–æ–Ω 8',
			place_builds = json.dumps([
				[0, 0],
				[1001, 1]
			])
		)

		await PlayerInventory.create(
			pers_id=ans.from_id, 
			pers_nickname=reg_nick_id, 
			backpack_cells=json.dumps([
				[0, 7]
			])
		)

		await PlayerSettings.create(
			pers_id=ans.from_id, 
			pers_nickname=reg_nick_id
		)

		after_registration_button = [
			[{'text':'–î–æ–º–æ–π','color':'positive'}]
		]
		after_registration_keyboard = keyboard_gen(after_registration_button, inline=True)

		await ans("üî∏–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n"
			"üî∏–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ - {ans.text[:-2]}–æ–≥–æ —Ä–æ–¥–∞\n"
			"üî∏–í–∞–º –æ—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è - –î–æ–º–æ–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë", 
			keyboard=after_registration_keyboard, attachment=...)
		await bot.branch.exit(ans.peer_id)

	async def round_registration_branch(self, ans: Message, *args):
		registration_button = [
			[{'text':'–ú—É–∂—Å–∫–æ–π','color':'positive'}],
			[{'text':'–ñ–µ–Ω—Å–∫–∏–π', 'color':'primary'}]
		]
		registration_keyboard = keyboard_gen(registration_button, inline=True)
		await ans("üî∏–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–ª–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\nüî∏–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥ –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞!", 
			keyboard=registration_keyboard, attachment=...)

@bot.on.message(text=["–¥–æ–º–æ–π", "!–¥–æ–º–æ–π", "! –¥–æ–º–æ–π", "/–¥–æ–º–æ–π", "/ –¥–æ–º–æ–π"], lower=True)
async def start_place(ans: Message):
	house_button = [
		[{'text':'–ù–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä','color':'positive'}],
		[{'text':'–¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤', 'color':'primary'}, {'text':'–ú–∞–≥–∞–∑–∏–Ω','color':'primary'}],
		[{'text':'–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ', 'color':'positive'}, {'text':'–ü–æ–º–æ—â—å', 'color':'positive'}]
	]
	house_keyboard = keyboard_gen(house_button, inline=True)
	await ans("üî∏–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç –ø–ª–æ—â–∞–¥–∫—É ‚Äî —ç—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –æ—Ç–¥—ã—Ö–∞ –æ—Ç –º—É–ª—Ç—å—Ç–∏–ø–ª–µ–µ—Ä–∞\n\n"
		   "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
		   "üîπ–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∏–≥—Ä–æ–≤—É—é –≤–∞–ª—é—Ç—É\n"
		   "üîπ–£–∑–Ω–∞—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤\n"
		   "üîπ–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n"
		   "üîπ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫–æ–º–∞–Ω–¥–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤", 
		   keyboard=house_keyboard, attachment=...)

@bot.on.message(text=["—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "!—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "! —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", 
					  "/—Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤", "/ —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤"], lower=True)
async def top_player(ans: Message):
	'''–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥–æ–º —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –≤–∞–ª—é—Ç–µ - —Ä—É–±–ª—è–º'''
	top_button = [
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	]
	top_keyboard = keyboard_gen(top_button, inline=True)
	await ans("üî∏–í–∞–º –ø–æ–∫–∞–∑–∞–Ω —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ GlamBot-–∞\nüî∏–ó–¥–µ—Å—å —Å–æ–±—Ä–∞–Ω—ã —Å–∞–º—ã–µ –≤–µ–ª–∏—á–∞–π—à–∏–µ –±–æ–π—Ü—ã", 
		   keyboard=top_keyboard, attachment=...)

@bot.on.message(text=["–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", "!–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", "! –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", 
					  "/–Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä", "/ –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä"], lower=True)
async def find_server(ans: Message):
	sessions_button = []

	sessions_list = [
	["–°–µ—Å—Å–∏—è ‚Äî 1",1],
	["–°–µ—Å—Å–∏—è ‚Äî 2",1],
	["–°–µ—Å—Å–∏—è ‚Äî 3",1],
	["–°–µ—Å—Å–∏—è ‚Äî 4",0],
	["–°–µ—Å—Å–∏—è ‚Äî 5",0]
	]

	load_sessions = ""

	for sess in sessions_list:
		if await SessionDate.get_or_none(sess_name=sess[0]) is None:
			await SessionDate.create(
				sess_name=sess[0],
				battle_category=sess[1],
				list_player_id=json.dumps([])
			)

		status_player = await StatePlayer.get(pers_id=ans.from_id).status_player
		session_date = await SessionDate.get(sess_name=sess[0])
		light_bulb_load = ("üíö" if session_date.now_seats_session<=40 else 
					 ("üß°" if session_date.now_seats_session<80 else "‚ù§Ô∏è"))
		load_sessions += f"{sess[0]}\nüë•–ò–≥—Ä–æ–∫–æ–≤ ‚Äî [0/{session_player}]{light_bulb_load}\n"
		if session_date.now_seats_session < 80 or (status_player >= 2 
											   and session_date.now_seats_session < 100):
			sessions_button.append([
				[{'text':sess[0], 'color':'positive'}]
			])


	sessions_button.append([
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	])
	session_keyboard = keyboard_gen(sessions_button, inline=True)
	await ans("üî∏–≠—Ç–æ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å–µ—Å—Å–∏–∏ - –±–ª–∞–≥–æ–¥–∞—Ä—è –∏–º –≤—ã —Å –¥—Ä—É–≥–æ–º –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ\n"
		   "–¢–∞–∫ –∂–µ —Å–µ—Å—Å–∏–∏ –Ω—É–∂–Ω—ã, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –≤ –ª–æ–∫–∞—Ü–∏—è—Ö\n"
		   "üî∏–ü–æ–∫—É–ø–∞—è —Å—Ç–∞—Ç—É—Å ‚Äî ..., –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–µ—Å—Å–∏—é —Å –∑–∞–≥—Ä—É–∑–∫–æ–π –¥–æ 120 —á–µ–ª–æ–≤–µ–∫\n\n"
		   f"üîπ–°–µ—Å—Å–∏–∏:\n{load_sessions}", 
		   keyboard=session_keyboard, attachment=...)

@bot.on.message(text=["—Å–µ—Å—Å–∏—è ‚Äî 1", "—Å–µ—Å—Å–∏—è ‚Äî 2", "—Å–µ—Å—Å–∏—è ‚Äî 3", "—Å–µ—Å—Å–∏—è ‚Äî 4", "—Å–µ—Å—Å–∏—è ‚Äî 5"], lower=True)
async def connection_session(ans: Message):
	'''–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä'''
	sessions_list = [
	["–°–µ—Å—Å–∏—è ‚Äî 1",1],
	["–°–µ—Å—Å–∏—è ‚Äî 2",1],
	["–°–µ—Å—Å–∏—è ‚Äî 3",1],
	["–°–µ—Å—Å–∏—è ‚Äî 4",0],
	["–°–µ—Å—Å–∏—è ‚Äî 5",0]
	]
	for sess in sessions_list:
		if await SessionDate.get_or_none(sess_name=sess[0]) is None:
			await SessionDate.create(
				sess_name=sess[0],
				battle_category=sess[1],
				list_player_id=json.dumps([0])
			)
		pers_state = await StatePlayer.get(pers_id=ans.from_id)
		session_date = await SessionDate.get(sess_name=sess[0])
		if sess[0] == ans.text and (session_date.now_seats_session<80 or 
							  (session_date.now_seats_session<100 and pers_state.status_player >= 2)):
			player_sess = json.loads(session_date.list_player_id)
			player_sess.append(ans.from_id)
			pers_state.status_player = int(sess[0][:-1])
			session_date.list_player_id = json.dumps(player_sess)
			session_date.now_seats_session += 1
			await session_date.save()
			await pers_state.save()
			await ans("üî∏–í—ã –∑–∞—à–ª–∏ –≤ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä")
			await bot.branch.add(ans.peer_id, "multiplayer_branch")
			break

		elif sess[0]==ans.text:
			house_button = [
				[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
			]
			house_keyboard=keyboard_gen(house_button, inline=True)
			await ans("üî∏–°–µ—Å—Å–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –ø–æ–∑–∂–µ", keyboard=house_keyboard, attachment=...)
			break

@bot.branch.cls_branch("market_branch")
class Branch(ClsBranch):
	@rule_disposal(VBMLRule("–í—ã–π—Ç–∏", lower=True))
	async def exit_market_branch(self, ans: Message):
		exit_market_button = [
			[{'text':'–î–æ–º–æ–π', 'color':'positive'}]
		]
		exit_market_keyboard = keyboard_gen(exit_market_button, inline=True)
		await ans("–û–∫–µ–π, –≤—ã—Ö–æ–¥–∏–º!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <<–î–æ–º–æ–π>>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è", 
			keyboard=exit_market_keyboard, attachment=...)
		await bot.branch.exit(ans.peer_id)

	@rule_disposal(VBMLRule("<ammount_gold:int>", lower=True))
	async def buy_valuts_branch(self, ans: Message, ammount_gold):
		donate_time = round(time())
		count_ruble = (1 if ammount_gold<=10 else 
				 (ammount_gold/10 if ammount_gold<=900000 else 90000))

		link_payment = await qiwi_payment(donate_time, cost_ruble)

		player_state = await StatePlayer.get(pers_id=ans.from_id)
		player_state.comment_donate = donate_time
		await player_state.save()

		buy_valuts_button = [
			[{'text': '–ù–ê–ñ–ò–ú–ê–ô –°–Æ–î–ê!', 'type': 'open_link', 'link': link_payment}], 
			[{'text':'–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã', 'color':'positive'}],
			[{'text':'–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã', 'color':'negative'}]
		]
		buy_valuts_keyboard = keyboard_gen(buy_valuts_button, inline=True)
		await ans("1Ô∏è‚É£–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–æ —Å—Å—ã–ª–∫–µ\n"
			"üî∏–ó–∞ –≤–∞—Å –º–æ–∂–µ—Ç –æ–ø–ª–∞—Ç–∏—Ç—å –¥—Ä—É–≥\n\n"
			"2Ô∏è‚É£–°–¥–µ–ª–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É –∏–ª–∏ –æ—Ç–º–µ–Ω—É\n"
			"üî∏–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ –∏ –Ω–∞–∂–º—ë—Ç–µ –Ω–∞ –æ—Ç–º–µ–Ω—É, —Ç–æ –≤–∞—à–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø—Ä–æ–ø–∞–¥—É—Ç‚ùó\n"
			"üî∏–ù–∞–∂–∏–º–∞–π—Ç–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –∏–Ω–∞—á–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–ø–∞–¥–µ—Ç‚ùó\n\n", 
			keyboard=buy_valuts_keyboard, attachment=...)

	@rule_disposal(VBMLRule("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã", lower=True))
	async def check_buy_valuts_branch(self, ans: Message):
		payment_state = await StatePlayer.get(pers_id=ans.from_id)
		if await qiwi_history(payment_state.comment_donate) is True:
			payment_state.now_donate_balance += payment_state.comment_donate*10
			payment_state.comment_donate = 0
			await payment_state.save()

			accept_val_button = [
				[{'text':'–î–æ–º–æ–π', 'color':'positive'}]
			]
			accept_val_keyboard = keyboard_gen(accept_val_keyboard, inline=True)
			await ans("üî∏–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –≤–∞–ª—é—Ç—É\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <<–î–æ–º–æ–π>>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è", 
			 keyboard=accept_val_keyboard, attachment=...)
			await bot.branch.exit(ans.peer_id)

		else:
			check_buy_valuts_button = [
				[{'text':'–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã', 'color':'positive'}],
				[{'text':'–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã', 'color':'negative'}]
			]
			check_buy_valuts_keyboard = keyboard_gen(check_buy_valuts_button, inline=True)
			await ans("–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥!", 
			 keyboard=check_buy_valuts_keyboard, attachment=...)

	@rule_disposal(VBMLRule("–û—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã", lower=True))
	async def cancel_buy_valuts_branch(self, ans: Message):
		payment_state = await StatePlayer.get(pers_id=ans.from_id)
		if await qiwi_history(payment_state.comment_donate) is True:
			payment_state.now_donate_balance += payment_state.comment_donate*10
			payment_state.comment_donate = 0
			await payment_state.save()

			accept_val_button = [
				[{'text':'–î–æ–º–æ–π', 'color':'positive'}]
			]
			accept_val_keyboard = keyboard_gen(accept_val_keyboard, inline=True)
			await ans("üî∏–û–ø–ª–∞—Ç–∞ –≤—Å–µ —Ç–∞–∫–∏ –ø—Ä–æ—à–ª–∞\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <<–î–æ–º–æ–π>>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è", 
			 keyboard=accept_val_keyboard, attachment=...)
			await bot.branch.exit(ans.peer_id)

		else:
			payment_state.comment_donate = 0
			await payment_state.save()
			close_buy_valuts_button = [
				[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
			]
			close_buy_valuts_keyboard = keyboard_gen(close_buy_valuts_button, inline=True)
			await ans("üî∏–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞", 
			 keyboard=close_buy_valuts_keyboard, attachment=...)
			await bot.branch.exit(ans.peer_id)

	async def round_buy_valuts_branch(self, ans: Message,):
		round_buy_valuts_button = [
			[{'text':'1000','color':'positive'}, {'text':'2500','color':'positive'}],
			[{'text':'5000','color':'positive'}, {'text':'10000','color':'positive'}],
			[{'text':'–í—ã–π—Ç–∏', 'color':'positive'}]
		]
		round_buy_valuts_keyboard = keyboard_gen(round_buy_valuts_button, inline=True)
		await ans("üî∏–ü—Ä–æ–¥–∞–≤–µ—Ü - '–Ø –Ω–µ –ø–æ–Ω—è–ª, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?'\n"
			"üî∏–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –Ω–µ –±–æ–ª—å—à–µ 900–∫!\n"
			"–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç, –Ω–∞–∂–∞—Ç–∏–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É", 
			keyboard=round_buy_valuts_keyboard, attachment=...)

@bot.on.message(text=["–º–∞–≥–∞–∑–∏–Ω", "!–º–∞–≥–∞–∑–∏–Ω", "! –º–∞–≥–∞–∑–∏–Ω", "/–º–∞–≥–∞–∑–∏–Ω", "/ –º–∞–≥–∞–∑–∏–Ω"], lower=True)
async def join_market(ans: Message):
	join_market_button = [
		[{'text':'1000','color':'positive'}, {'text':'2500','color':'positive'}],
		[{'text':'5000','color':'positive'}, {'text':'10000','color':'positive'}],
		[{'text':'–í—ã–π—Ç–∏', 'color':'negative'}]
	]
	join_market_keyboard = keyboard_gen(join_market_button, inline=True)
	await ans("üî∏–í—ã –ø—Ä–∏—à–ª–∏ –≤ –º–∞–≥–∞–∑–∏–Ω –±–æ—Ç–∞, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–æ–ª–æ—Ç—ã–µ –º–æ–Ω–µ—Ç—ã\n"
		   "üî∏–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—É–º–º—É\n\n"
		   "üîπ–û—Ç–Ω–æ—à–µ–Ω–∏–µ –≤–∞–ª—é—Ç 1:10 (—Ä—É–±–ª—å:–≥–æ–ª–¥–µ)\n\n"
		   "100‚ÇΩ ‚Äî 1000üî∂\n"
		   "250‚ÇΩ ‚Äî 2500üî∂\n"
		   "500‚ÇΩ ‚Äî 5000üî∂\n"
		   "1000‚ÇΩ ‚Äî 10000üî∂\n\n"
		   "üî∏–ú–∞–∫—Å –ø–æ–∫—É–ø–∫–∞ –≥–æ–ª–¥—ã ‚Äî 900000üî∂", 
		   keyboard=join_market_keyboard, attachment=...)
	await bot.branch.add(ans.peer_id, "market_branch")

@bot.on.message(text="–æ—Ç–≤–µ—Ç–∏—Ç—å <id_player:int>", lower=True)
async def my_date(ans: Message, id_player):
	if ans.text == 185031237:
		allowed_button = [
			[{'text':'–í—ã–π—Ç–∏', 'color':'negative'}]
		]
		allowed_keyboard = keyboard_gen(allowed_button, inline=True)
		await ans("üî∏–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞\n"
			"üî∏–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç",
			keyboard=allowed_keyboard, attachment=...)
		await bot.branch.add(ans.peer_id, "root_branch", id_mail_player=id_player)

	else:
		access_denied_button = [
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		]
		access_denied_keyboard = keyboard_gen(access_denied_button, inline=True)
		await ans("‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", keyboard=access_denied_keyboard)

@bot.on.message(text="–∑–∞–±–∞–Ω–∏—Ç—å —Ä–µ–ø <id_player:int>", lower=True)
async def my_date(ans: Message, id_player):
	if ans.text == 185031237:
		accept_ban_button = [
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		]
		accept_ban_keyboard = keyboard_gen(accept_ban_button, inline=True)
		pers_state = await StatePlayer.get(pers_id=ans.from_id)
		pers_state.ban_report = 1
		await pers_state.save()
		await ans("üî∏–†–µ–ø–æ—Ä—Ç –∏–≥—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω\n",
			keyboard=accept_ban_keyboard, attachment=...)

	else:
		access_denied_button = [
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		]
		access_denied_keyboard = keyboard_gen(access_denied_button, inline=True)
		await ans("‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", keyboard=access_denied_keyboard)

@bot.branch.cls_branch("root_branch")
class Branch(ClsBranch):
	@rule_disposal(VBMLRule("–í—ã–π—Ç–∏", lower=True))
	async def exit_root_branch(self, ans: Message):
		exit_root_button = [
			[{'text':'–î–æ–º–æ–π', 'color':'positive'}]
		]
		exit_root_keyboard = keyboard_gen(exit_root_button, inline=True)
		await ans("–û–∫–µ–π, –≤—ã—Ö–æ–¥–∏–º!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <<–î–æ–º–æ–π>>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è", 
			keyboard=exit_root_keyboard, attachment=...)
		await bot.branch.exit(ans.peer_id)

	@rule_disposal(VBMLRule("<root_text>", lower=True))
	async def send_root_branch(self, ans: Message, id_mail_player, root_text):
		if len(root_text)>=2 and len(root_text)<=100:
			accept_root_button = [
				[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
			]
			accept_root_keyboard = keyboard_gen(accept_root_button, inline=True)
			root_button = [
				[{'text': f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç', 'color':'positive'}]
			]
			
			root_keyboard = keyboard_gen(root_button, inline=True)
			nick_player_report = (await bot.api.users.get(user_ids=ans.from_id))[0].first_name
			rand_report = random.randint(-2e9,2e9)
			await bot.api.messages.send(user_id=id_mail_player, 
							   random_id=rand_report, 
							   message=(f"–í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–ø–æ—Ä—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ @id{ans.from_id}({nick_player_report})\n\n\n"
										"–ï–≥–æ –∏–¥:{ans.from_id}\n\n"
										"–û–Ω –æ—Ç–≤–µ—Ç–∏–ª:\n"
										"<<{root_text}>>"),
							   keyboard=root_keyboard,
							   attachment=...)
			await ans(f'üéâ–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:\n\n\n <<{root_text}>> !', 
						keyboard=accept_root_keyboard, attachment=...)
			await bot.branch.exit(ans.from_id)

		else:
			error_send_button = [
				[{'text':'–í—ã–π—Ç–∏', 'color':'negative'}]
			]
			error_send_keyboard = keyboard_gen(error_send_button, inline=True)
			await ans("‚ùå–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É\n"
			 "üè∑Ô∏è–î–ª–∏–Ω–∞ - –æ—Ç 2 –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤!\n\n"
			 "üî∏–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç", 
			 keyboard=error_send_keyboard, attachment=...)

@bot.on.message(text=["–º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "!–º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "! –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "/–º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "/ –º–æ–∏ –¥–∞–Ω–Ω—ã–µ"], lower=True)
async def my_date(ans: Message):
	'''–ù–∞–ø–∏—Å–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è

	üî∏–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –º–æ–¥—É–ª–∏
	üî∏OpenGL + Pillow + Pillow-SMID/numpy

	'''
	
	my_date_button = [
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	]
	my_date_keyboard = keyboard_gen(my_date_button, inline=True)
	await ans("üî∏–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", keyboard=my_date_keyboard, attachment=...)

@bot.branch.cls_branch("report_branch")
class Branch(ClsBranch):
	@rule_disposal(VBMLRule("–í—ã–π—Ç–∏", lower=True))
	async def exit_report_branch(self, ans: Message):
		exit_report_button = [
			[{'text':'–î–æ–º–æ–π', 'color':'positive'}]
		]
		exit_report_keyboard = keyboard_gen(exit_report_button, inline=True)
		await ans("–û–∫–µ–π, –≤—ã—Ö–æ–¥–∏–º!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <<–î–æ–º–æ–π>>, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è", 
			keyboard=exit_report_keyboard, attachment=...)
		await bot.branch.exit(ans.peer_id)

	@rule_disposal(VBMLRule("<report_text>", lower=True))
	async def send_report_branch(self, ans: Message, report_text):
		if len(report_text)>=10 and len(report_text)<=50:
			accept_report_button = [
				[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
			]
			accept_report_keyboard = keyboard_gen(accept_report_button, inline=True)
			root_button = [
				[{'text': f'–û—Ç–≤–µ—Ç–∏—Ç—å {ans.from_id}', 'color':'positive'}],
				[{'text': f'–ó–∞–±–∞–Ω–∏—Ç—å —Ä–µ–ø {ans.from_id}', 'color':'negative'}]
			]
			
			root_keyboard = keyboard_gen(root_button, inline=True)
			nick_player_report = (await bot.api.users.get(user_ids=ans.from_id))[0].first_name
			rand_report = random.randint(-2e9,2e9)
			await bot.api.messages.send(user_id=185031237, 
							   random_id=rand_report, 
							   message=(f"–í–∞–º –ø—Ä–∏—à–µ–ª —Ä–µ–ø–æ—Ä—Ç –æ—Ç –∏–≥—Ä–æ–∫–∞ @id{ans.from_id}({nick_player_report})\n\n\n"
										"–ï–≥–æ –∏–¥:{ans.from_id}\n\n"
										"–û–Ω —Ö–æ—á–µ—Ç —Å–ø—Ä–æ—Å–∏—Ç—å:\n"
										"<<{report_text}>>"),
							   keyboard=root_keyboard,
							   attachment=...)
			await ans(f'üéâ–í–∞—à —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞:\n\n\n <<{report_text}>> !', 
						keyboard=accept_report_keyboard, attachment=...)
			await bot.branch.exit(ans.from_id)

		else:
			error_send_button = [
				[{'text':'–í—ã–π—Ç–∏', 'color':'negative'}]
			]
			error_send_keyboard = keyboard_gen(error_send_button, inline=True)
			await ans("‚ùå–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É\n"
			 "üè∑Ô∏è–î–ª–∏–Ω–∞ - –æ—Ç 10 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤!\n\n"
			 "üî∏–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–ø–æ—Ä—Ç", 
			 keyboard=error_send_keyboard, attachment=...)

@bot.on.message(text=["–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", "!–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", "! –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", 
					  "/–æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç", "/ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç"], lower=True)
async def send_report(ans: Message):
	send_report_button = [
		[{'text':'–í—ã–π—Ç–∏', 'color':'negative'}]
	]
	send_report_keyboard = keyboard_gen(send_report_button, inline=True)
	await ans("üî∏–í—ã –∑–∞—à–ª–∏ –≤ –±–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–æ—Ä—Ç–∞,\n"
			"üî∏–ï–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π\n\n"
			"–®–∞–±–ª–æ–Ω –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
			"–í —á–∞—Ç–µ –º—É–ª—å—Ç–∏–ø–ª–µ–µ—Ä–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
			"üî∏–¢–µ–∫—Å—Ç —Ä–µ–ø–æ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–µ–Ω—å—à–µ 50!\n"
			"!!!–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –Ω–µ –∞–¥–µ–∫–≤–∞—Ç–Ω—ã–º–∏ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∞–º/—Ñ–ª—É–¥, —Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –ø—Ä–∞–≤–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤–∞–º —Ä–µ–ø–æ—Ä—Ç!!!", 
		   keyboard=send_report_keyboard, attachment=...)
	await bot.branch.add(ans.peer_id, "report_branch")

@bot.on.message(text=["–∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞", "!–∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞", "! –∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞", 
					  "/–∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞", "/ –∞–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞"], lower=True)
async def admin_mailing(ans: Message):
	if ans.from_id == 185031237:
		admin_mail_button = [
			[{'text':'–û—Ç–º–µ–Ω–∏—Ç—å', 'color':'negative'}]
		]
		admin_mail_keyboard = keyboard_gen(admin_mail_button, inline=True)
		await ans("üî∏–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏\n\n"
			"–®–∞–±–ª–æ–Ω\n"
			"–ü–æ–¥–ø–∏—Å—á–∏–∫–∏, —É –Ω–∞—Å –∞–∫—Ü–∏—è –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã!\n\n"
			"üîπ–ë–æ–ª—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –º–µ–Ω—å—à–µ 500 —Å–∏–º–≤–æ–ª–æ–≤",
			keyboard=ad_mail_keyboard, attachment=...)
		await bot.branch.add(ans.from_id, 'admin_mailing_branch')

	else:
		refusal_adm_mail_but = [
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		]
		refusal_adm_mail_keyboard = keyboard_gen(refusal_adm_mail_but, inline=True)
		await ans("‚ùå–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ", keyboard=refusal_adm_mail_keyboard, attachment=...)

@bot.branch.cls_branch('admin_mailing_branch')
class Branch(ClsBranch):
	'''–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã –ê–¥–º–∏–Ω –º–æ–≥ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ

	üî∏–ö–ª–∞–≤–∏–∞—Ç—É—Ä—É
	üî∏–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
	üî∏–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ

	'''
	@rule_disposal(VBMLRule("–û—Ç–º–µ–Ω–∏—Ç—å", lower=True))
	async def exit_ad_mailing_branch(self, ans: Message):
		stop_adm_button = [
			[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
		]
		stop_adm_keyboard = keyboard_gen(stop_adm_button, inline=True)
		await ans("üî∏–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏\n"
			"üî∏–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø—É—Ç—å", keyboard=stop_adm_keyboard, attachment=...)
		await bot.branch.exit(ans.peer_id)

	@rule_disposal(VBMLRule("<mailing_text>", lower=True))
	async def exit_ad_mailing_branch(self, ans: Message, mailing_text):
		if len(mailing_text)>=5 and len(mailing_text)<=500:
			allowed_mailing_player = await StatePlayer.get(indicator_mailing=1)
			accept_mailinig_button = [
				[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
			]
			accept_mailinig_keyboard = keyboard_gen(accept_mailinig_button, inline=True)
			disconn_mailinig_button = [
				[{'text':'–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª', 'color':'negative'}]
			]
			disconn_mailinig_keyboard = keyboard_gen(disconn_mailinig_button, inline=True)
			nick_admin_mailing = (await bot.api.users.get(user_ids=ans.from_id))[0].first_name
			await ans('üéâ–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å', attachment=...)
			for person_date in allowed_mailing_player:
				rand_num_mailing = random.randint(-2e9,2e9)
				await bot.api.messages.send(user_id=person_date.pers_id,
								random_id=rand_num_mailing,
								message=(f"üì¢–í–∞–º –ø—Ä–∏—à–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∞\n\n"
				 "üî∏–í—ã –º–æ–∂–µ—Ç–µ –µ–µ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ä–∞–∑–¥–µ–ª–µ –ø–æ–º–æ—â—å\n\n<<{mailing_text}>>"),
								keyboard=disconn_mailinig_keyboard,
								attachment=...)

			await ans("üéâ–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å\n\n"
			f"üì¢–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Äî {len(allowed_mailing_player)}üë§", 
			keyboard=accept_mailinig_keyboard, attachment=...)
			await bot.branch.exit(ans.peer_id)

		else:
			error_adm_mailing_button = [
				[{'text':'–û—Ç–º–µ–Ω–∏—Ç—å', 'color':'negative'}]
			]
			error_adm_mailing_keyboard = keyboard_gen(error_adm_mailing_button, inline=True)
			await ans("‚ùå–¢–µ–∫—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É\n"
			 "üè∑Ô∏è–î–ª–∏–Ω–∞ - –æ—Ç 5 –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤!\n\n"
			 "üî∏–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É - –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–µ–ø–æ—Ä—Ç", 
			 keyboard=error_adm_mailing_keyboard, attachment=...)

@bot.on.message(text=["—Ä–∞—Å—Å—ã–ª–∫–∞", "!—Ä–∞—Å—Å—ã–ª–∫–∞", "! —Ä–∞—Å—Å—ã–ª–∫–∞", "/—Ä–∞—Å—Å—ã–ª–∫–∞", 
					  "/ —Ä–∞—Å—Å—ã–ª–∫–∞","—Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª"], lower=True)
async def panel_mailing(ans: Message):
	check_indicator_mailing = await StatePlayer.get(pers_id=ans.from_id).indicator_mailing
	panel_mailing_button = [
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	]
	panel_mailing_keyboard = keyboard_gen(panel_mailing_button,inline=True)
	message_answer = ("üì¢–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n" 
				 "üî∏–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å —Å–Ω–æ–≤–∞ –≤ –∫—Ä—É–≥—É —Å–æ–±—ã—Ç–∏–π –∏ –Ω–æ–≤–æ—Å—Ç–µ–π, —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É" 
				 if check_indicator_mailing==1 else 
				 "üì¢–°–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–Ω–æ–≤–∞ —Å –≤–∞–º–∏, –Ω–µ —Å–∫—É—á–∞–ª–∏?\n" 
				 "üîπ–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, —Ç–æ–≥–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –µ—â–µ —Ä–∞–∑ –Ω–∞ –∫–Ω–æ–ø–∫—É")
	diff_indicator_mailing = (1 if check_indicator_mailing==0 else 0)
	await conn.execute(f"UPDATE player_database SET check_indicator_mailing={diff_indicator_mailing} WHERE person_id={ans.from_id}")
	await ans(message_answer, keyboard=panel_mailing_button, attachment=...)

@bot.on.message(text=["quiet", "!quiet", "! quiet", "/quiet", "/ quiet"], lower=True)
async def help(ans: Message):
	await ans(await StatePlayer.get(pers_id=ans.from_id))
	await ans(await PlayerRocket.get(pers_id=ans.from_id))
	await ans(await PlayerInventory.get(pers_id=ans.from_id))
	await ans(await PlayerSettings.get(pers_id=ans.from_id))

@bot.on.message(text=["–ø–æ–º–æ—â—å", "!–ø–æ–º–æ—â—å", "! –ø–æ–º–æ—â—å", "/–ø–æ–º–æ—â—å", "/ –ø–æ–º–æ—â—å"], lower=True)
async def help(ans: Message):
	help_button = [
		[{'text':'–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç', 'color':'positive'}],
		[
			{'text':'–°—Ç–∞—Ç—å—è', 'type':'open_link',
				'link':'https://vk.com/@glambot-o-glambot-i-dalneishem-razvitii-new'},
			{'text':'–û—Ñ—ë—Ä—Ç–∞', 'type':'open_link',
				'link':'https://docs.google.com/document/d/1E2RNytuavppM3eXA76AIxAWBbKhSCCEnbUaTf85QgjI/edit?usp=drivesdk'}
		],
		[{'text':'–†–∞—Å—Å—ã–ª–∫–∞', 'color':'positive'}, {'text':'–ê–¥–º–∏–Ω —Ä–∞—Å—Å—ã–ª–∫–∞', 'color':'positive'}],
		[{'text':'–î–æ–º–æ–π', 'color':'negative'}]
	]
	help_keyboard = keyboard_gen(help_button, inline=True)
	await ans("üî∏–í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n"
		   "üî∏–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é\n"
		   "üî∏–ï—Å–ª–∏ –≤—ã –Ω–∞—à–ª–∏ –±–∞–≥–∏,—á–∏—Ç–µ—Ä–æ–≤ –∏ —Ç.–ø - –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ä–µ–ø–æ—Ä—Ç\n"
		   "üî∏–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å/–≤–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É\n"
		   "üî∏–ú–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –æ—Ñ—ë—Ä—Ç—É –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", 
		   keyboard=help_keyboard, attachment=...)

async def init_tortoise():
	await Tortoise.init(
		db_url="postgres://glamuser:GisMyVoron1974@127.0.0.1:5432/glamdata", 
		modules={"models": ["tortoise_models"]}
	)
	await Tortoise.generate_schemas()

bot.run_polling(on_startup=init_tortoise)